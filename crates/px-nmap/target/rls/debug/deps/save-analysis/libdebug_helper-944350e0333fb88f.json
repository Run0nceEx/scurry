{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/ghost/.cargo/registry/src/github.com-1ecc6299db9ec823/debug-helper-0.3.10","program":"/home/ghost/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","debug_helper","--edition=2018","/home/ghost/.cargo/registry/src/github.com-1ecc6299db9ec823/debug-helper-0.3.10/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=944350e0333fb88f","-C","extra-filename=-944350e0333fb88f","--out-dir","/opt/nfs/projects/px-engine/proxbox-rs/repo/px-nmap/target/rls/debug/deps","-L","dependency=/opt/nfs/projects/px-engine/proxbox-rs/repo/px-nmap/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/ghost/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/opt/nfs/projects/px-engine/proxbox-rs/repo/px-nmap/target/rls/debug/deps/libdebug_helper-944350e0333fb88f.rmeta"},"prelude":{"crate_id":{"name":"debug_helper","disambiguator":[10064253606694477986,5158867857107915807]},"crate_root":"/home/ghost/.cargo/registry/src/github.com-1ecc6299db9ec823/debug-helper-0.3.10/src","external_crates":[{"file_name":"/home/ghost/.cargo/registry/src/github.com-1ecc6299db9ec823/debug-helper-0.3.10/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[6613225743082300914,1742833353142201501]}},{"file_name":"/home/ghost/.cargo/registry/src/github.com-1ecc6299db9ec823/debug-helper-0.3.10/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[11975364352078366518,17024437125936897165]}},{"file_name":"/home/ghost/.cargo/registry/src/github.com-1ecc6299db9ec823/debug-helper-0.3.10/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[7052056008796586215,10378193753915807487]}},{"file_name":"/home/ghost/.cargo/registry/src/github.com-1ecc6299db9ec823/debug-helper-0.3.10/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[7266508812970390764,1104721975748785438]}}],"span":{"file_name":"/home/ghost/.cargo/registry/src/github.com-1ecc6299db9ec823/debug-helper-0.3.10/src/lib.rs","byte_start":0,"byte_end":12820,"line_start":1,"line_end":507,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/ghost/.cargo/registry/src/github.com-1ecc6299db9ec823/debug-helper-0.3.10/src/lib.rs","byte_start":0,"byte_end":12820,"line_start":1,"line_end":507,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/ghost/.cargo/registry/src/github.com-1ecc6299db9ec823/debug-helper-0.3.10/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":18},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":13}],"decl_id":null,"docs":"# Debug Helper","sig":null,"attributes":[{"value":"*\n# Debug Helper\n\nThis crate provides declarative macros to help you implement the `Debug` trait manually.\n\nInstead of this crate, in most cases, you can use the [`educe`](https://crates.io/crates/educe) crate to implement the `Debug` trait.\n\n## Examples\n\nFor structs,\n\n```rust\n#[macro_use] extern crate debug_helper;\n\nuse std::fmt::{self, Formatter, Debug};\n\npub struct A {\n    pub f1: u8,\n    pub f2: i16,\n    pub f3: f64,\n}\n\nimpl Debug for A {\n    fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), fmt::Error> {\n        impl_debug_for_struct!(A, f, self, .f1, (.f3, \"{:.3}\", self.f3));\n    }\n}\n\nlet a = A {\n    f1: 1,\n    f2: 2,\n    f3: std::f64::consts::PI,\n};\n\nprintln!(\"{:#?}\", a);\n\n/*\n    A {\n        f1: 1,\n        f3: 3.142,\n    }\n*/\n```\n\nFor tuple structs,\n\n```rust\n#[macro_use] extern crate debug_helper;\n\nuse std::fmt::{self, Formatter, Debug};\n\npub struct A(pub u8, pub i16, pub f64);\n\nimpl Debug for A {\n    fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), fmt::Error> {\n        impl_debug_for_tuple_struct!(A, f, self, .0, (.2, \"{:.3}\", self.2));\n    }\n}\n\nlet a = A(1, 2, std::f64::consts::PI);\n\nprintln!(\"{:#?}\", a);\n\n/*\n    A(\n        1,\n        3.142,\n    )\n*/\n```\n\nFor enums (without the enum name),\n\n```rust\n#[macro_use] extern crate debug_helper;\n\nuse std::fmt::{self, Formatter, Debug};\n\npub enum A {\n    V1,\n    V2(u8, i16, f64),\n    V3 {\n        f1: u8,\n        f2: i16,\n        f3: f64,\n    },\n}\n\nimpl Debug for A {\n    fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), fmt::Error> {\n        impl_debug_for_enum!(A::{V1, (V2(f1, _, f3): (.f1, (.f3, \"{:.3}\", f3))), {V3{f1, f2: _, f3}: (.f1, (.f3, \"{:.3}\", f3))}}, f, self);\n    }\n}\n\nlet a = A::V1;\nlet b = A::V2(1, 2, std::f64::consts::PI);\nlet c = A::V3{\n    f1: 1,\n    f2: 2,\n    f3: std::f64::consts::PI,\n};\n\nprintln!(\"{:#?}\", a);\nprintln!(\"{:#?}\", b);\nprintln!(\"{:#?}\", c);\n\n/*\n    V1\n    V2(\n        1,\n        3.142,\n    )\n    V3 {\n        f1: 1,\n        f3: 3.142,\n    }\n*/\n```\n\nFor enums (with the enum name),\n\n```rust\n#[macro_use] extern crate debug_helper;\n\nuse std::fmt::{self, Formatter, Debug};\n\npub enum A {\n    V1,\n    V2(u8, i16, f64),\n    V3 {\n        f1: u8,\n        f2: i16,\n        f3: f64,\n    },\n}\n\nimpl Debug for A {\n    fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), fmt::Error> {\n        impl_debug_for_enum!({A::V1, (V2(f1, _, f3): (.f1, (.f3, \"{:.3}\", f3))), {V3{f1, f2: _, f3}: (.f1, (.f3, \"{:.3}\", f3))}}, f, self);\n    }\n}\n\nlet a = A::V1;\nlet b = A::V2(1, 2, std::f64::consts::PI);\nlet c = A::V3{\n    f1: 1,\n    f2: 2,\n    f3: std::f64::consts::PI,\n};\n\nprintln!(\"{:#?}\", a);\nprintln!(\"{:#?}\", b);\nprintln!(\"{:#?}\", c);\n\n/*\n    A::V1\n    A::V2(\n        1,\n        3.142,\n    )\n    A::V3 {\n        f1: 1,\n        f3: 3.142,\n    }\n*/\n```\n\n\n\nGhost fields,\n\n```rust\n#[macro_use] extern crate debug_helper;\n\nuse std::fmt::{self, Formatter, Debug};\n\npub struct A {\n    pub f1: u8,\n    pub f2: i16,\n    pub f3: f64,\n}\n\nimpl Debug for A {\n    fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), fmt::Error> {\n        impl_debug_for_struct!(A, f, self, .f1, (.f3, \"{:.3}\", self.f3), (.sum, \"{:.3}\", self.f1 as f64 + self.f2 as f64 + self.f3));\n    }\n}\n\nlet a = A {\n    f1: 1,\n    f2: 2,\n    f3: std::f64::consts::PI,\n};\n\nprintln!(\"{:#?}\", a);\n\n/*\n    A {\n        f1: 1,\n        f3: 3.142,\n        sum: 6.142,\n    }\n*/\n```\n\n```rust\n#[macro_use] extern crate debug_helper;\n\nuse std::fmt::{self, Formatter, Debug};\n\npub struct A(pub u8, pub i16, pub f64);\n\nimpl Debug for A {\n    fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), fmt::Error> {\n        impl_debug_for_tuple_struct!(A, f, self, .0, (.2, \"{:.3}\", self.2), (.3, \"{:.3}\", self.0 as f64 + self.1 as f64 + self.2));\n    }\n}\n\nlet a = A(1, 2, std::f64::consts::PI);\n\nprintln!(\"{:#?}\", a);\n\n/*\n    A(\n        1,\n        3.142,\n        6.142,\n    )\n*/\n```\n\nFake structs,\n\n```rust\n#[macro_use] extern crate debug_helper;\n\nuse std::fmt::{self, Formatter, Debug};\n\npub struct A(pub u8, pub i16, pub f64);\n\nimpl Debug for A {\n    fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), fmt::Error> {\n        impl_debug_for_struct!(A, f, self, let .f1 = self.0, let .f2 = self.1, let .f3 = self.2);\n    }\n}\n\nlet a = A(1, 2, std::f64::consts::PI);\n\nprintln!(\"{:#?}\", a);\n\n/*\n    A {\n        f1: 1,\n        f2: 2,\n        f3: 3.141592653589793,\n    }\n*/\n```\n\nFake tuple structs,\n\n```rust\n#[macro_use] extern crate debug_helper;\n\nuse std::fmt::{self, Formatter, Debug};\n\npub struct A {\n    pub f1: u8,\n    pub f2: i16,\n    pub f3: f64,\n}\n\nimpl Debug for A {\n    fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), fmt::Error> {\n        impl_debug_for_tuple_struct!(A, f, self, let .0 = self.f1, let .1 = self.f2, let .2 = self.f3);\n    }\n}\n\nlet a = A {\n    f1: 1,\n    f2: 2,\n    f3: std::f64::consts::PI,\n};\n\nprintln!(\"{:#?}\", a);\n\n/*\n    A(\n        1,\n        2,\n        3.141592653589793,\n    )\n*/\n```\n\n## TODO\n\n1. Fake enum struct variants and tuple variants.\n1. Enum variants can be renamed.\n\n*/","span":{"file_name":"/home/ghost/.cargo/registry/src/github.com-1ecc6299db9ec823/debug-helper-0.3.10/src/lib.rs","byte_start":0,"byte_end":4943,"line_start":1,"line_end":301,"column_start":1,"column_end":3}},{"value":"no_std","span":{"file_name":"/home/ghost/.cargo/registry/src/github.com-1ecc6299db9ec823/debug-helper-0.3.10/src/lib.rs","byte_start":4945,"byte_end":4955,"line_start":303,"line_end":303,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":10},"span":{"file_name":"/home/ghost/.cargo/registry/src/github.com-1ecc6299db9ec823/debug-helper-0.3.10/src/lib.rs","byte_start":5092,"byte_end":5101,"line_start":311,"line_end":311,"column_start":12,"column_end":21},"name":"RawString","qualname":"::RawString","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":12},"span":{"file_name":"/home/ghost/.cargo/registry/src/github.com-1ecc6299db9ec823/debug-helper-0.3.10/src/lib.rs","byte_start":5102,"byte_end":5112,"line_start":311,"line_end":311,"column_start":22,"column_end":32},"name":"0","qualname":"::RawString::0","value":"alloc::string::String","parent":{"krate":0,"index":10},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/ghost/.cargo/registry/src/github.com-1ecc6299db9ec823/debug-helper-0.3.10/src/lib.rs","byte_start":5131,"byte_end":5140,"line_start":313,"line_end":313,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":14}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/ghost/.cargo/registry/src/github.com-1ecc6299db9ec823/debug-helper-0.3.10/src/lib.rs","byte_start":5131,"byte_end":5140,"line_start":313,"line_end":313,"column_start":16,"column_end":25},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":10},"to":{"krate":1,"index":6584}}]}